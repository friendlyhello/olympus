#include <iostream>
using namespace std;

//Parent Class
class Object
{
  public:
  virtual void BeginPlay();
};

//Child Class
class Actor : public Object
{
  public:
  virtual void BeginPlay() override;
};

//Another Child class
class Pawn : public Actor
{
  public:
  virtual void BeginPlay() override;
};

int main()
{
  Object* Ptr_To_Object = new Object;

  Actor* Ptr_To_Actor = new Actor;
  
  Pawn* Ptr_To_Pawn = new Pawn;
  
  Object* ObjectArrray[] = {Ptr_To_Object, Ptr_To_Actor, Ptr_To_Pawn};

  // Loop through the array to see the magic of Polymorphism!

  // Notice how each pointer prints its own function override, all because of the inheritance chain

  for (int i = 0; i < 3; i++)
  {
    ObjectArrray[i]->BeginPlay();
  }

  delete Ptr_To_Object;
  delete Ptr_To_Actor;
  delete Ptr_To_Pawn;
}

//function definition  - remember to "fully qualify"
void Object::BeginPlay()
{
  cout << "Object begin play!\n";
}

void Actor::BeginPlay()
{
  cout << "Actor begin play!\n";
}

void Pawn::BeginPlay()
{
  cout << "Pawn begin play!\n";
}
